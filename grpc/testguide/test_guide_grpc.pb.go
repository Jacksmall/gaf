// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: testguide/test_guide.proto

package testguide

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestGuideClient is the client API for TestGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestGuideClient interface {
	// unary grpc
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	// server streaming
	GetFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (TestGuide_GetFeaturesClient, error)
	// client streaming
	RecordFeature(ctx context.Context, opts ...grpc.CallOption) (TestGuide_RecordFeatureClient, error)
	// bidirectional streaming
	TestChat(ctx context.Context, opts ...grpc.CallOption) (TestGuide_TestChatClient, error)
}

type testGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewTestGuideClient(cc grpc.ClientConnInterface) TestGuideClient {
	return &testGuideClient{cc}
}

func (c *testGuideClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/testguide.TestGuide/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testGuideClient) GetFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (TestGuide_GetFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestGuide_ServiceDesc.Streams[0], "/testguide.TestGuide/GetFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &testGuideGetFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestGuide_GetFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type testGuideGetFeaturesClient struct {
	grpc.ClientStream
}

func (x *testGuideGetFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testGuideClient) RecordFeature(ctx context.Context, opts ...grpc.CallOption) (TestGuide_RecordFeatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestGuide_ServiceDesc.Streams[1], "/testguide.TestGuide/RecordFeature", opts...)
	if err != nil {
		return nil, err
	}
	x := &testGuideRecordFeatureClient{stream}
	return x, nil
}

type TestGuide_RecordFeatureClient interface {
	Send(*Point) error
	CloseAndRecv() (*TestSummary, error)
	grpc.ClientStream
}

type testGuideRecordFeatureClient struct {
	grpc.ClientStream
}

func (x *testGuideRecordFeatureClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testGuideRecordFeatureClient) CloseAndRecv() (*TestSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testGuideClient) TestChat(ctx context.Context, opts ...grpc.CallOption) (TestGuide_TestChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestGuide_ServiceDesc.Streams[2], "/testguide.TestGuide/TestChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &testGuideTestChatClient{stream}
	return x, nil
}

type TestGuide_TestChatClient interface {
	Send(*TestNote) error
	Recv() (*TestNote, error)
	grpc.ClientStream
}

type testGuideTestChatClient struct {
	grpc.ClientStream
}

func (x *testGuideTestChatClient) Send(m *TestNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testGuideTestChatClient) Recv() (*TestNote, error) {
	m := new(TestNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestGuideServer is the server API for TestGuide service.
// All implementations must embed UnimplementedTestGuideServer
// for forward compatibility
type TestGuideServer interface {
	// unary grpc
	GetFeature(context.Context, *Point) (*Feature, error)
	// server streaming
	GetFeatures(*Rectangle, TestGuide_GetFeaturesServer) error
	// client streaming
	RecordFeature(TestGuide_RecordFeatureServer) error
	// bidirectional streaming
	TestChat(TestGuide_TestChatServer) error
	mustEmbedUnimplementedTestGuideServer()
}

// UnimplementedTestGuideServer must be embedded to have forward compatible implementations.
type UnimplementedTestGuideServer struct {
}

func (UnimplementedTestGuideServer) GetFeature(context.Context, *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedTestGuideServer) GetFeatures(*Rectangle, TestGuide_GetFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (UnimplementedTestGuideServer) RecordFeature(TestGuide_RecordFeatureServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordFeature not implemented")
}
func (UnimplementedTestGuideServer) TestChat(TestGuide_TestChatServer) error {
	return status.Errorf(codes.Unimplemented, "method TestChat not implemented")
}
func (UnimplementedTestGuideServer) mustEmbedUnimplementedTestGuideServer() {}

// UnsafeTestGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestGuideServer will
// result in compilation errors.
type UnsafeTestGuideServer interface {
	mustEmbedUnimplementedTestGuideServer()
}

func RegisterTestGuideServer(s grpc.ServiceRegistrar, srv TestGuideServer) {
	s.RegisterService(&TestGuide_ServiceDesc, srv)
}

func _TestGuide_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGuideServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testguide.TestGuide/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGuideServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestGuide_GetFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestGuideServer).GetFeatures(m, &testGuideGetFeaturesServer{stream})
}

type TestGuide_GetFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type testGuideGetFeaturesServer struct {
	grpc.ServerStream
}

func (x *testGuideGetFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _TestGuide_RecordFeature_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestGuideServer).RecordFeature(&testGuideRecordFeatureServer{stream})
}

type TestGuide_RecordFeatureServer interface {
	SendAndClose(*TestSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type testGuideRecordFeatureServer struct {
	grpc.ServerStream
}

func (x *testGuideRecordFeatureServer) SendAndClose(m *TestSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testGuideRecordFeatureServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestGuide_TestChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestGuideServer).TestChat(&testGuideTestChatServer{stream})
}

type TestGuide_TestChatServer interface {
	Send(*TestNote) error
	Recv() (*TestNote, error)
	grpc.ServerStream
}

type testGuideTestChatServer struct {
	grpc.ServerStream
}

func (x *testGuideTestChatServer) Send(m *TestNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testGuideTestChatServer) Recv() (*TestNote, error) {
	m := new(TestNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestGuide_ServiceDesc is the grpc.ServiceDesc for TestGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testguide.TestGuide",
	HandlerType: (*TestGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _TestGuide_GetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFeatures",
			Handler:       _TestGuide_GetFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordFeature",
			Handler:       _TestGuide_RecordFeature_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TestChat",
			Handler:       _TestGuide_TestChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "testguide/test_guide.proto",
}
